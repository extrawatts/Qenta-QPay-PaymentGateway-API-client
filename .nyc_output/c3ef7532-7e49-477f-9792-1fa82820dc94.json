{"/Users/ostracoda/Desktop/qenta/src/errors.ts":{"path":"/Users/ostracoda/Desktop/qenta/src/errors.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":24},"end":{"line":4,"column":54}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":23}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":42}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":56}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":28}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":20}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":62}},"9":{"start":{"line":17,"column":27},"end":{"line":17,"column":108}},"10":{"start":{"line":17,"column":54},"end":{"line":17,"column":77}},"11":{"start":{"line":17,"column":98},"end":{"line":17,"column":107}},"12":{"start":{"line":18,"column":8},"end":{"line":18,"column":34}},"13":{"start":{"line":19,"column":8},"end":{"line":19,"column":72}},"14":{"start":{"line":19,"column":49},"end":{"line":19,"column":70}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":20}},"16":{"start":{"line":23,"column":8},"end":{"line":23,"column":47}},"17":{"start":{"line":26,"column":0},"end":{"line":26,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":25},"end":{"line":10,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":21},"end":{"line":14,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":22},"end":{"line":21,"column":5}},"line":15},"3":{"name":"(anonymous_3)","decl":{"start":{"line":17,"column":44},"end":{"line":17,"column":45}},"loc":{"start":{"line":17,"column":54},"end":{"line":17,"column":77}},"line":17},"4":{"name":"(anonymous_4)","decl":{"start":{"line":17,"column":86},"end":{"line":17,"column":87}},"loc":{"start":{"line":17,"column":98},"end":{"line":17,"column":107}},"line":17},"5":{"name":"(anonymous_5)","decl":{"start":{"line":19,"column":39},"end":{"line":19,"column":40}},"loc":{"start":{"line":19,"column":49},"end":{"line":19,"column":70}},"line":19},"6":{"name":"(anonymous_6)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":15},"end":{"line":24,"column":5}},"line":22}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":4,"4":4,"5":4,"6":0,"7":0,"8":2,"9":2,"10":6,"11":6,"12":2,"13":2,"14":4,"15":2,"16":0,"17":1},"f":{"0":4,"1":0,"2":2,"3":6,"4":6,"5":4,"6":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/ostracoda/Desktop/qenta/src/errors.ts","sources":["/Users/ostracoda/Desktop/qenta/src/errors.ts"],"names":[],"mappings":";;;AAAA,MAAM,eAAe,GAA8B,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAElF,MAAa,UAAW,SAAQ,KAAK;IAKnC,YAAY,OAAgB;QAC1B,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAA;QAEjC,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;IACjD,CAAC;IAEM,WAAW,CAAC,GAAQ;QACzB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAA;QACnB,OAAO,IAAI,CAAA;IACb,CAAC;IAEM,UAAU,CAAC,KAAU;QAC1B,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,GAAG,CAAS,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAE7D,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QACrG,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAA;IACb,CAAC;IAEM,QAAQ;QACb,OAAO,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,EAAE,CAAA;IACxC,CAAC;CACF;AA7BD,gCA6BC","sourcesContent":["const errorDefinition: { [key: string]: string } = require('../error-codes.json');\n\nexport class BadRequest extends Error {\n  public errors: string[]\n  public errInfo: string[]\n  public response: any\n\n  constructor(message?: string) {\n    super(message)\n    this.name = this.constructor.name\n    // Capture stack trace, excluding constructor call from it.\n    Error.captureStackTrace(this, this.constructor)\n  }\n\n  public setResponse(obj: any): BadRequest {\n    this.response = obj\n    return this\n  }\n\n  public parseError(error: any): BadRequest {\n    this.errInfo = [...new Set<string>(error.message.split('.'))]\n    // clear start with \"+\" error code\n    const errorCodes = this.errInfo.map((code) => code.replace(/^\\+/, '')).filter(([_, v]) => v != null);\n    this.errInfo = errorCodes;\n    this.errors = this.errInfo.map((code) => errorDefinition[code])\n    return this\n  }\n\n  public toString(): string {\n    return `${this.name}: ${this.message}`\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6f4528288e0fe020077e1acf59bdf543f7fd9373","contentHash":"4cec98ff3168aaa75599eff164f95e771e925bdf47e14e59f5bb96a320686a1c"}}